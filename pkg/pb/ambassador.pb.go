// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ambassador.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19084e700d1da46, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type ListTopicsResponse struct {
	Topics               []string `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTopicsResponse) Reset()         { *m = ListTopicsResponse{} }
func (m *ListTopicsResponse) String() string { return proto.CompactTextString(m) }
func (*ListTopicsResponse) ProtoMessage()    {}
func (*ListTopicsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19084e700d1da46, []int{1}
}

func (m *ListTopicsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTopicsResponse.Unmarshal(m, b)
}
func (m *ListTopicsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTopicsResponse.Marshal(b, m, deterministic)
}
func (m *ListTopicsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTopicsResponse.Merge(m, src)
}
func (m *ListTopicsResponse) XXX_Size() int {
	return xxx_messageInfo_ListTopicsResponse.Size(m)
}
func (m *ListTopicsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTopicsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTopicsResponse proto.InternalMessageInfo

func (m *ListTopicsResponse) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

type ProdRq struct {
	DeploymentOwner      string            `protobuf:"bytes,1,opt,name=deploymentOwner,proto3" json:"deploymentOwner,omitempty"`
	DeploymentName       string            `protobuf:"bytes,2,opt,name=deploymentName,proto3" json:"deploymentName,omitempty"`
	EndpointPath         string            `protobuf:"bytes,3,opt,name=endpointPath,proto3" json:"endpointPath,omitempty"`
	RunID                string            `protobuf:"bytes,4,opt,name=runID,proto3" json:"runID,omitempty"`
	ContentType          string            `protobuf:"bytes,5,opt,name=contentType,proto3" json:"contentType,omitempty"`
	Message              []byte            `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	Parameters           map[string]string `protobuf:"bytes,7,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StreamOffset         uint64            `protobuf:"varint,8,opt,name=streamOffset,proto3" json:"streamOffset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ProdRq) Reset()         { *m = ProdRq{} }
func (m *ProdRq) String() string { return proto.CompactTextString(m) }
func (*ProdRq) ProtoMessage()    {}
func (*ProdRq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19084e700d1da46, []int{2}
}

func (m *ProdRq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProdRq.Unmarshal(m, b)
}
func (m *ProdRq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProdRq.Marshal(b, m, deterministic)
}
func (m *ProdRq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProdRq.Merge(m, src)
}
func (m *ProdRq) XXX_Size() int {
	return xxx_messageInfo_ProdRq.Size(m)
}
func (m *ProdRq) XXX_DiscardUnknown() {
	xxx_messageInfo_ProdRq.DiscardUnknown(m)
}

var xxx_messageInfo_ProdRq proto.InternalMessageInfo

func (m *ProdRq) GetDeploymentOwner() string {
	if m != nil {
		return m.DeploymentOwner
	}
	return ""
}

func (m *ProdRq) GetDeploymentName() string {
	if m != nil {
		return m.DeploymentName
	}
	return ""
}

func (m *ProdRq) GetEndpointPath() string {
	if m != nil {
		return m.EndpointPath
	}
	return ""
}

func (m *ProdRq) GetRunID() string {
	if m != nil {
		return m.RunID
	}
	return ""
}

func (m *ProdRq) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *ProdRq) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ProdRq) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *ProdRq) GetStreamOffset() uint64 {
	if m != nil {
		return m.StreamOffset
	}
	return 0
}

type ProdRs struct {
	StreamOffset         uint64   `protobuf:"varint,3,opt,name=streamOffset,proto3" json:"streamOffset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProdRs) Reset()         { *m = ProdRs{} }
func (m *ProdRs) String() string { return proto.CompactTextString(m) }
func (*ProdRs) ProtoMessage()    {}
func (*ProdRs) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19084e700d1da46, []int{3}
}

func (m *ProdRs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProdRs.Unmarshal(m, b)
}
func (m *ProdRs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProdRs.Marshal(b, m, deterministic)
}
func (m *ProdRs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProdRs.Merge(m, src)
}
func (m *ProdRs) XXX_Size() int {
	return xxx_messageInfo_ProdRs.Size(m)
}
func (m *ProdRs) XXX_DiscardUnknown() {
	xxx_messageInfo_ProdRs.DiscardUnknown(m)
}

var xxx_messageInfo_ProdRs proto.InternalMessageInfo

func (m *ProdRs) GetStreamOffset() uint64 {
	if m != nil {
		return m.StreamOffset
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*ListTopicsResponse)(nil), "ListTopicsResponse")
	proto.RegisterType((*ProdRq)(nil), "ProdRq")
	proto.RegisterMapType((map[string]string)(nil), "ProdRq.ParametersEntry")
	proto.RegisterType((*ProdRs)(nil), "ProdRs")
}

func init() { proto.RegisterFile("ambassador.proto", fileDescriptor_c19084e700d1da46) }

var fileDescriptor_c19084e700d1da46 = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xcf, 0x6e, 0xda, 0x40,
	0x10, 0xc6, 0x59, 0x1b, 0xec, 0x32, 0xa0, 0x82, 0xb6, 0x55, 0xbb, 0xe2, 0xe4, 0xfa, 0x50, 0x59,
	0x2a, 0xb2, 0x2a, 0x7a, 0x68, 0x14, 0x29, 0x87, 0x44, 0xe1, 0x10, 0x25, 0x0a, 0xc8, 0xe2, 0x94,
	0xdb, 0x82, 0x87, 0x04, 0x81, 0x77, 0x37, 0xbb, 0x4b, 0x22, 0xbf, 0x73, 0x1e, 0x22, 0xb2, 0x31,
	0xff, 0x6f, 0xf3, 0xfd, 0x66, 0x34, 0xb3, 0x33, 0xfb, 0x41, 0x97, 0x67, 0x53, 0x6e, 0x0c, 0x4f,
	0xa5, 0x8e, 0x95, 0x96, 0x56, 0x86, 0x3e, 0x34, 0x86, 0x99, 0xb2, 0x79, 0xd8, 0x07, 0xfa, 0xb0,
	0x30, 0x76, 0x22, 0xd5, 0x62, 0x66, 0x12, 0x34, 0x4a, 0x0a, 0x83, 0xf4, 0x07, 0x78, 0xb6, 0x24,
	0x8c, 0x04, 0x6e, 0xd4, 0x4c, 0x2a, 0x15, 0x7e, 0x38, 0xe0, 0x8d, 0xb5, 0x4c, 0x93, 0x57, 0x1a,
	0x41, 0x27, 0x45, 0xb5, 0x92, 0x79, 0x86, 0xc2, 0x8e, 0xde, 0x05, 0x6a, 0x46, 0x02, 0x12, 0x35,
	0x93, 0x53, 0x4c, 0x7f, 0xc3, 0xd7, 0x3d, 0x7a, 0xe4, 0x19, 0x32, 0xa7, 0x2c, 0x3c, 0xa1, 0x34,
	0x84, 0x36, 0x8a, 0x54, 0xc9, 0x85, 0xb0, 0x63, 0x6e, 0x5f, 0x98, 0x5b, 0x56, 0x1d, 0x31, 0xfa,
	0x1d, 0x1a, 0x7a, 0x2d, 0xee, 0x6e, 0x59, 0xbd, 0x4c, 0x6e, 0x04, 0x0d, 0xa0, 0x35, 0x93, 0xc2,
	0xa2, 0xb0, 0x93, 0x5c, 0x21, 0x6b, 0x94, 0xb9, 0x43, 0x44, 0x19, 0xf8, 0x19, 0x1a, 0xc3, 0x9f,
	0x91, 0x79, 0x01, 0x89, 0xda, 0xc9, 0x56, 0xd2, 0xff, 0x00, 0x8a, 0x6b, 0x9e, 0xa1, 0x45, 0x6d,
	0x98, 0x1f, 0xb8, 0x51, 0x6b, 0xf0, 0x33, 0xde, 0x2c, 0x19, 0x8f, 0x77, 0x99, 0xa1, 0xb0, 0x3a,
	0x4f, 0x0e, 0x4a, 0x8b, 0xe7, 0x1a, 0xab, 0x91, 0x67, 0xa3, 0xf9, 0xdc, 0xa0, 0x65, 0x5f, 0x02,
	0x12, 0xd5, 0x93, 0x23, 0xd6, 0xbb, 0x82, 0xce, 0x49, 0x0b, 0xda, 0x05, 0x77, 0x89, 0x79, 0x75,
	0xab, 0x22, 0x2c, 0x76, 0x7a, 0xe3, 0xab, 0xf5, 0xf6, 0x2c, 0x1b, 0x71, 0xe9, 0x5c, 0x90, 0xb0,
	0x5f, 0x5d, 0xfb, 0x7c, 0x98, 0x7b, 0x3e, 0x6c, 0xc0, 0xa1, 0x73, 0xcf, 0xe7, 0x4b, 0x7e, 0xbd,
	0xfb, 0x6c, 0xfa, 0x0b, 0xfc, 0xa2, 0xc1, 0x7a, 0x86, 0xd4, 0xaf, 0x76, 0xea, 0x55, 0x81, 0x09,
	0x6b, 0x11, 0xf9, 0x4b, 0xe8, 0x1f, 0x80, 0xbd, 0x01, 0xa8, 0x17, 0x97, 0xb6, 0xe8, 0x7d, 0x8b,
	0xcf, 0x5d, 0x11, 0xd6, 0x6e, 0xea, 0x4f, 0x8e, 0x9a, 0x4e, 0xbd, 0xd2, 0x43, 0xff, 0x3e, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xea, 0x8b, 0x51, 0x39, 0x57, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KafkaAmbassadorClient is the client API for KafkaAmbassador service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KafkaAmbassadorClient interface {
	Produce(ctx context.Context, opts ...grpc.CallOption) (KafkaAmbassador_ProduceClient, error)
	ListTopics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListTopicsResponse, error)
}

type kafkaAmbassadorClient struct {
	cc *grpc.ClientConn
}

func NewKafkaAmbassadorClient(cc *grpc.ClientConn) KafkaAmbassadorClient {
	return &kafkaAmbassadorClient{cc}
}

func (c *kafkaAmbassadorClient) Produce(ctx context.Context, opts ...grpc.CallOption) (KafkaAmbassador_ProduceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KafkaAmbassador_serviceDesc.Streams[0], "/KafkaAmbassador/Produce", opts...)
	if err != nil {
		return nil, err
	}
	x := &kafkaAmbassadorProduceClient{stream}
	return x, nil
}

type KafkaAmbassador_ProduceClient interface {
	Send(*ProdRq) error
	Recv() (*ProdRs, error)
	grpc.ClientStream
}

type kafkaAmbassadorProduceClient struct {
	grpc.ClientStream
}

func (x *kafkaAmbassadorProduceClient) Send(m *ProdRq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kafkaAmbassadorProduceClient) Recv() (*ProdRs, error) {
	m := new(ProdRs)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kafkaAmbassadorClient) ListTopics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListTopicsResponse, error) {
	out := new(ListTopicsResponse)
	err := c.cc.Invoke(ctx, "/KafkaAmbassador/ListTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KafkaAmbassadorServer is the server API for KafkaAmbassador service.
type KafkaAmbassadorServer interface {
	Produce(KafkaAmbassador_ProduceServer) error
	ListTopics(context.Context, *Empty) (*ListTopicsResponse, error)
}

// UnimplementedKafkaAmbassadorServer can be embedded to have forward compatible implementations.
type UnimplementedKafkaAmbassadorServer struct {
}

func (*UnimplementedKafkaAmbassadorServer) Produce(srv KafkaAmbassador_ProduceServer) error {
	return status.Errorf(codes.Unimplemented, "method Produce not implemented")
}
func (*UnimplementedKafkaAmbassadorServer) ListTopics(ctx context.Context, req *Empty) (*ListTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopics not implemented")
}

func RegisterKafkaAmbassadorServer(s *grpc.Server, srv KafkaAmbassadorServer) {
	s.RegisterService(&_KafkaAmbassador_serviceDesc, srv)
}

func _KafkaAmbassador_Produce_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KafkaAmbassadorServer).Produce(&kafkaAmbassadorProduceServer{stream})
}

type KafkaAmbassador_ProduceServer interface {
	Send(*ProdRs) error
	Recv() (*ProdRq, error)
	grpc.ServerStream
}

type kafkaAmbassadorProduceServer struct {
	grpc.ServerStream
}

func (x *kafkaAmbassadorProduceServer) Send(m *ProdRs) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kafkaAmbassadorProduceServer) Recv() (*ProdRq, error) {
	m := new(ProdRq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KafkaAmbassador_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaAmbassadorServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KafkaAmbassador/ListTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaAmbassadorServer).ListTopics(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _KafkaAmbassador_serviceDesc = grpc.ServiceDesc{
	ServiceName: "KafkaAmbassador",
	HandlerType: (*KafkaAmbassadorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTopics",
			Handler:    _KafkaAmbassador_ListTopics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Produce",
			Handler:       _KafkaAmbassador_Produce_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ambassador.proto",
}
